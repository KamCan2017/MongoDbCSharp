//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Core.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IDeveloperService")]
    public interface IDeveloperService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/CreateDocument", ReplyAction="http://tempuri.org/IDeveloperService/CreateDocumentResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        MongoDB.Bson.BsonElement[] CreateDocument(object developer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/CreateDocument", ReplyAction="http://tempuri.org/IDeveloperService/CreateDocumentResponse")]
        System.Threading.Tasks.Task<MongoDB.Bson.BsonElement[]> CreateDocumentAsync(object developer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/DeleteAll", ReplyAction="http://tempuri.org/IDeveloperService/DeleteAllResponse")]
        bool DeleteAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/DeleteAll", ReplyAction="http://tempuri.org/IDeveloperService/DeleteAllResponse")]
        System.Threading.Tasks.Task<bool> DeleteAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/DeleteById", ReplyAction="http://tempuri.org/IDeveloperService/DeleteByIdResponse")]
        bool DeleteById(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/DeleteById", ReplyAction="http://tempuri.org/IDeveloperService/DeleteByIdResponse")]
        System.Threading.Tasks.Task<bool> DeleteByIdAsync(MongoDB.Bson.ObjectId id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Delete", ReplyAction="http://tempuri.org/IDeveloperService/DeleteResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        bool Delete(object entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Delete", ReplyAction="http://tempuri.org/IDeveloperService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(object entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/FindAll", ReplyAction="http://tempuri.org/IDeveloperService/FindAllResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        object[] FindAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/FindAll", ReplyAction="http://tempuri.org/IDeveloperService/FindAllResponse")]
        System.Threading.Tasks.Task<object[]> FindAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/FindById", ReplyAction="http://tempuri.org/IDeveloperService/FindByIdResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        object FindById(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/FindById", ReplyAction="http://tempuri.org/IDeveloperService/FindByIdResponse")]
        System.Threading.Tasks.Task<object> FindByIdAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/FindByTextSearch", ReplyAction="http://tempuri.org/IDeveloperService/FindByTextSearchResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        object[] FindByTextSearch(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/FindByTextSearch", ReplyAction="http://tempuri.org/IDeveloperService/FindByTextSearchResponse")]
        System.Threading.Tasks.Task<object[]> FindByTextSearchAsync(string text);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/GetDocumentFromDeveloperView", ReplyAction="http://tempuri.org/IDeveloperService/GetDocumentFromDeveloperViewResponse")]
        MongoDB.Bson.BsonElement[][] GetDocumentFromDeveloperView();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/GetDocumentFromDeveloperView", ReplyAction="http://tempuri.org/IDeveloperService/GetDocumentFromDeveloperViewResponse")]
        System.Threading.Tasks.Task<MongoDB.Bson.BsonElement[][]> GetDocumentFromDeveloperViewAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/InsertDocument", ReplyAction="http://tempuri.org/IDeveloperService/InsertDocumentResponse")]
        MongoDB.Bson.BsonElement[] InsertDocument(MongoDB.Bson.BsonElement[] doc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/InsertDocument", ReplyAction="http://tempuri.org/IDeveloperService/InsertDocumentResponse")]
        System.Threading.Tasks.Task<MongoDB.Bson.BsonElement[]> InsertDocumentAsync(MongoDB.Bson.BsonElement[] doc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Save", ReplyAction="http://tempuri.org/IDeveloperService/SaveResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        object Save(object entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Save", ReplyAction="http://tempuri.org/IDeveloperService/SaveResponse")]
        System.Threading.Tasks.Task<object> SaveAsync(object entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/SaveEntities", ReplyAction="http://tempuri.org/IDeveloperService/SaveEntitiesResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        object[] SaveEntities(object[] entities);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/SaveEntities", ReplyAction="http://tempuri.org/IDeveloperService/SaveEntitiesResponse")]
        System.Threading.Tasks.Task<object[]> SaveEntitiesAsync(object[] entities);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Update", ReplyAction="http://tempuri.org/IDeveloperService/UpdateResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        object Update(object entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Update", ReplyAction="http://tempuri.org/IDeveloperService/UpdateResponse")]
        System.Threading.Tasks.Task<object> UpdateAsync(object entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/UpdateDocument", ReplyAction="http://tempuri.org/IDeveloperService/UpdateDocumentResponse")]
        bool UpdateDocument(MongoDB.Bson.BsonElement[] doc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/UpdateDocument", ReplyAction="http://tempuri.org/IDeveloperService/UpdateDocumentResponse")]
        System.Threading.Tasks.Task<bool> UpdateDocumentAsync(MongoDB.Bson.BsonElement[] doc);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Clone", ReplyAction="http://tempuri.org/IDeveloperService/CloneResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonValue))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.ObjectId))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(MongoDB.Bson.BsonElement[][]))]
        object Clone(object entity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDeveloperService/Clone", ReplyAction="http://tempuri.org/IDeveloperService/CloneResponse")]
        System.Threading.Tasks.Task<object> CloneAsync(object entity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDeveloperServiceChannel : Core.ServiceReference1.IDeveloperService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeveloperServiceClient : System.ServiceModel.ClientBase<Core.ServiceReference1.IDeveloperService>, Core.ServiceReference1.IDeveloperService {
        
        public DeveloperServiceClient() {
        }
        
        public DeveloperServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DeveloperServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeveloperServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DeveloperServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public MongoDB.Bson.BsonElement[] CreateDocument(object developer) {
            return base.Channel.CreateDocument(developer);
        }
        
        public System.Threading.Tasks.Task<MongoDB.Bson.BsonElement[]> CreateDocumentAsync(object developer) {
            return base.Channel.CreateDocumentAsync(developer);
        }
        
        public bool DeleteAll() {
            return base.Channel.DeleteAll();
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAllAsync() {
            return base.Channel.DeleteAllAsync();
        }
        
        public bool DeleteById(MongoDB.Bson.ObjectId id) {
            return base.Channel.DeleteById(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteByIdAsync(MongoDB.Bson.ObjectId id) {
            return base.Channel.DeleteByIdAsync(id);
        }
        
        public bool Delete(object entity) {
            return base.Channel.Delete(entity);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(object entity) {
            return base.Channel.DeleteAsync(entity);
        }
        
        public object[] FindAll() {
            return base.Channel.FindAll();
        }
        
        public System.Threading.Tasks.Task<object[]> FindAllAsync() {
            return base.Channel.FindAllAsync();
        }
        
        public object FindById(string id) {
            return base.Channel.FindById(id);
        }
        
        public System.Threading.Tasks.Task<object> FindByIdAsync(string id) {
            return base.Channel.FindByIdAsync(id);
        }
        
        public object[] FindByTextSearch(string text) {
            return base.Channel.FindByTextSearch(text);
        }
        
        public System.Threading.Tasks.Task<object[]> FindByTextSearchAsync(string text) {
            return base.Channel.FindByTextSearchAsync(text);
        }
        
        public MongoDB.Bson.BsonElement[][] GetDocumentFromDeveloperView() {
            return base.Channel.GetDocumentFromDeveloperView();
        }
        
        public System.Threading.Tasks.Task<MongoDB.Bson.BsonElement[][]> GetDocumentFromDeveloperViewAsync() {
            return base.Channel.GetDocumentFromDeveloperViewAsync();
        }
        
        public MongoDB.Bson.BsonElement[] InsertDocument(MongoDB.Bson.BsonElement[] doc) {
            return base.Channel.InsertDocument(doc);
        }
        
        public System.Threading.Tasks.Task<MongoDB.Bson.BsonElement[]> InsertDocumentAsync(MongoDB.Bson.BsonElement[] doc) {
            return base.Channel.InsertDocumentAsync(doc);
        }
        
        public object Save(object entity) {
            return base.Channel.Save(entity);
        }
        
        public System.Threading.Tasks.Task<object> SaveAsync(object entity) {
            return base.Channel.SaveAsync(entity);
        }
        
        public object[] SaveEntities(object[] entities) {
            return base.Channel.SaveEntities(entities);
        }
        
        public System.Threading.Tasks.Task<object[]> SaveEntitiesAsync(object[] entities) {
            return base.Channel.SaveEntitiesAsync(entities);
        }
        
        public object Update(object entity) {
            return base.Channel.Update(entity);
        }
        
        public System.Threading.Tasks.Task<object> UpdateAsync(object entity) {
            return base.Channel.UpdateAsync(entity);
        }
        
        public bool UpdateDocument(MongoDB.Bson.BsonElement[] doc) {
            return base.Channel.UpdateDocument(doc);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateDocumentAsync(MongoDB.Bson.BsonElement[] doc) {
            return base.Channel.UpdateDocumentAsync(doc);
        }
        
        public object Clone(object entity) {
            return base.Channel.Clone(entity);
        }
        
        public System.Threading.Tasks.Task<object> CloneAsync(object entity) {
            return base.Channel.CloneAsync(entity);
        }
    }
}
